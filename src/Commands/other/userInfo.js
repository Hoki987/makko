//===========================================/ Import the modeles \===========================================\\
const { Client, ContextMenuCommandBuilder, ApplicationCommandType, ContextMenuCommandInteraction, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js')
//==========< OTHERS >==========\\

//===========================================< Code >===========================================\\

module.exports = {
    data: new ContextMenuCommandBuilder()
        .setName('userInfo')
        .setType(ApplicationCommandType.User)
        .setDMPermission(false),

    /**
     * @param {Client} client
     * @param {ContextMenuCommandInteraction} interaction
     */

    async execute(client, interaction) {
        const embed = new EmbedBuilder()
            .setTitle(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ | ${interaction.targetMember.user.username}`)
            .setFields(
                { name: `\`–ü–æ–ª–Ω–æ–µ –∏–º—è:\``, value: interaction.targetMember.user.username, inline: true },
                { name: `\`Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\``, value: `${interaction.targetMember.user.id}`, inline: true },
                { name: `\`–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:\``, value: `${interaction.targetMember.user.createdAt.toLocaleDateString()}`, inline: true },
                { name: `\`–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\``, value: `${interaction.targetMember.joinedAt.toLocaleDateString()}`, inline: true },
                { name: `\`–°—Ç–∞—Ç—É—Å:\``, value: `${interaction.targetMember.presence?.status === undefined ? 'offline' : interaction.targetMember.presence.status}`, inline: true },
                { name: `\`–ì–æ–ª–æ—Å–æ–≤–æ–π –æ–Ω–ª–∞–π–Ω:\``, value: `0—á.0–º.0—Å`, inline: true })
            .setThumbnail(interaction.user.displayAvatarURL())
            const historyButton = new ButtonBuilder()
            .setLabel('–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π')
            .setEmoji('üîí')
            .setStyle(ButtonStyle.Secondary)
            .setCustomId('userInfo_history')
        await interaction.deferReply({ ephemeral: true })
        await interaction.editReply({ embeds: [embed], components: [new ActionRowBuilder().addComponents(historyButton)] })
    }
}
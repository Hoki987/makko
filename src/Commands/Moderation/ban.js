//===========================================/ Import the modeles \===========================================\\
const { Client, ChatInputCommandInteraction, SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

//==========< OTHERS >==========\\
const { WorkRoles, Utility, StaffRoles, StaffChats, HistoryEmojis, OwnerId, CommandsLogsID, Reasons, UntilsRoles } = require('../../../config.js');
const History = require('../../Structures/Models/History.js');
const { action } = require('../../Structures/Untils/Functions/action.js');
const { createDB, countStaff, findOneDB } = require('../../Structures/Untils/Functions/actionDB.js');
const { Op } = require('sequelize');
//===========================================< Code >===========================================\\
module.exports = {
    data: new SlashCommandBuilder()
        .setName("ban")
        .setDescription('–ë–∞–Ω–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        .setDMPermission(false)
        .addUserOption((target) => target.setName("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å").setDescription("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è").setRequired(true))
        .addStringOption((reason) => reason.setName("–ø—Ä–∏—á–∏–Ω–∞").setDescription("–í–≤–µ–¥–∏ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞").setRequired(true).addChoices(
            { name: '–ø–µ—Ä–µ—Ö–æ–¥', value: '–ø–µ—Ä–µ—Ö–æ–¥' }, // –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞
            { name: '4.4', value: '4.4' }, // 2 –±–∞–Ω–∞ –ø–æ —ç—Ç–æ–π –ø—Ä–∏—á–∏–Ω–µ - –Ω–∞–≤—Å–µ–≥–¥–∞
            { name: '3.1', value: '3.1' }, // —Ç—è–∂–µ–ª—ã–π 
            { name: '3.3', value: '3.3' }, // —Ç—è–∂–µ–ª—ã–π
            { name: '3.6', value: '3.6' }, // —Ç—è–∂–µ–ª—ã–π
            { name: '3.7', value: '3.7' }, // —Ç—è–∂–µ–ª—ã–π
            { name: '3.9', value: '3.9' }, // –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞. –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–æ–ª—É—á–∞–µ—Ç –≤–∞—Ä–Ω –ø–æ —ç—Ç–æ–π –ø—Ä–∏—á–∏–Ω–µ, —Ç–æ + –Ω–µ–¥–µ–ª—è –±–∞–Ω–∞
            { name: '3.10', value: '3.10' }, // —Ç—è–∂–µ–ª—ã–π
            { name: '3.11', value: '3.11' }, // –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.
            { name: '3.13', value: '3.13' }, // —Ç—è–∂–µ–ª—ã–π.
            { name: '4.3', value: '4.3' },
            { name: '<13', value: '<13' }, // –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.
        )),
    /**
     * @param {Client} client
     * @param {ChatInputCommandInteraction} interaction
     */
    async execute(client, interaction) {
        const getUser = interaction.options.get('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        const getReason = interaction.options.getString('–ø—Ä–∏—á–∏–Ω–∞');

        const isAssistant = interaction.channel.id === StaffChats.Assistant
        const isControl = interaction.channel.id === StaffChats.Control

        const memberPosition = interaction.member.roles.cache.filter(r => Object.values(StaffRoles).includes(r.id))?.sort((a, b) => b.position - a.position)?.first()?.position || 1;
        const targetPosition = getUser.member.roles.cache.filter(r => Object.values(StaffRoles).includes(r.id))?.sort((a, b) => b.position - a.position)?.first()?.position || 0;

        const hasRoleExecutor = (id) => interaction.member.roles.cache.has(id);
        const hasRole = (id) => getUser.member.roles.cache.has(id);
        const banReason = (banType) => Object.values(banType).includes(getReason);

        let color;
        let fields;
        let staffSheet;
        let customId;

        let description;
        let badDescription;
        let time;

        let expiresAt;

        const text = {
            time: ['**–Ω–∞–≤—Å–µ–≥–¥–∞**', '**–Ω–∞ 30 –¥–Ω–µ–π**'],
            banPerm: `**[${HistoryEmojis.Ban}]** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@${getUser.user.id}> –±—ã–ª **–∑–∞–±–∞–Ω–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞**\n\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36m${getReason}[0m\`\`\``,
            standart: `**[${HistoryEmojis.Ban}]** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@${getUser.user.id}> –±—ã–ª **–∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 30 –¥–Ω–µ–π**\n\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36m${getReason}[0m\`\`\``,
            badOne: `**[${HistoryEmojis.Ban}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${getUser.user.id}> –Ω–µ –±—ã–ª –≤—ã–¥–∞–Ω <@&${WorkRoles.Ban}>\n\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36m—É–∂–µ –∏–º–µ–µ—Ç—Å—è –±–∞–Ω[0m\`\`\`**`,
            badTwo: `\`\`\`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!\`\`\``,
            badThree: `**[${HistoryEmojis.Ban}] –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç! <@&${WorkRoles.Ban}> –±—É–¥–µ—Ç —Å–Ω—è—Ç.**`,
            Appel: `\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36m${getReason}[0m\`\`\` \n${Utility.pointEmoji} –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å–ø–æ—Ä–∏—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ **–Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.**\n${Utility.pointEmoji} –ò–º–µ–π—Ç–µ –≤–≤–∏–¥—É, —á—Ç–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤–∞–º –ª—É—á—à–µ \n${Utility.fonEmoji} –∏–º–µ—Ç—å **–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞** —Å–≤–æ–π –Ω–µ–≤–∏–Ω–æ–≤–Ω–æ—Å—Ç–∏.\n${Utility.pointEmoji} –ï—Å–ª–∏ –≤–∞—à–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ,\n ${Utility.fonEmoji} **–æ–Ω–æ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ.**`
        }
        const field = {
            Bad: [{ name: "```   –°—É–±—ä–µ–∫—Ç   ```", value: `<@${interaction.user.id}>`, inline: true }, { name: "```   –û–±—ä–µ–∫—Ç   ```", value: `<@${getUser.user.id}>`, inline: true }],
        }

        await interaction.deferReply()
        switch (true) {
            case isControl:
                staffSheet = 1162940648
                customId = `appeal_ban_ControlButton`
                break;
            case isAssistant:
                staffSheet = 0
                customId = 'appeal_ban_AssistButton'
                break;
            case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator) || [OwnerId.hoki].includes(interaction.user.id):
                staffSheet = null
                customId = 'appeal_ban_AdminButton'
                break;
            default:
                staffSheet = undefined
                break;
        }
        switch (true) {
            case staffSheet === undefined:
            case interaction.user.id === getUser.member.id:
            case getUser.user.bot:
            case memberPosition <= targetPosition && ![OwnerId.hoki].includes(interaction.user.id):
            case hasRole(WorkRoles.Ban) && await countStaff(interaction.user.id) === 0 && !hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator) && ![OwnerId.hoki].includes(interaction.user.id):
                badDescription = text.badTwo;
                fields = field.Bad
                color = Utility.colorDiscord;
                break;
            case hasRole(WorkRoles.Ban):
                const activeBan = await History.findOne({ where: { target: getUser.user.id, type: 'Ban', expiresAt: { [Op.gt]: new Date() }, } })
                if (activeBan) {
                    badDescription = text.badOne
                    fields = field.Bad
                    color = Utility.colorDiscord;
                } else {
                    badDescription = text.badThree
                    color = Utility.colorRed
                    fields = field.Bad
                    await getUser.member.roles.remove(WorkRoles.Ban)
                }
                break;
            default:
                switch (staffSheet) {
                    case 0:
                    case 1162940648:
                        switch (true) {
                            case banReason(Reasons.PERM):
                                switch (true) {
                                    case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator):
                                    case [OwnerId.hoki].includes(interaction.user.id):
                                        description = text.banPerm
                                        color = Utility.colorDiscord
                                        time = text.time[0]
                                        await createDB(interaction.user.id, getUser.user.id, getReason, 'Ban', null)
                                        await getUser.member.roles.add(WorkRoles.Ban)
                                        await getUser.member.roles.remove(getUser.member.roles.cache.filter(r => !Object.values(UntilsRoles).includes(r.id)))
                                        break;
                                    case await countStaff(interaction.user.id) != 0:
                                        description = text.banPerm
                                        color = Utility.colorDiscord
                                        time = text.time[0]
                                        await createDB(interaction.user.id, getUser.user.id, getReason, 'Ban', null)
                                        action(staffSheet, interaction.user.id, 10)
                                        await getUser.member.roles.add(WorkRoles.Ban)
                                        await getUser.member.roles.remove(getUser.member.roles.cache.filter(r => !Object.values(UntilsRoles).includes(r.id)))
                                        break;
                                    default:
                                        fields = field.Bad
                                        badDescription = text.badTwo;
                                        color = Utility.colorDiscord;
                                        break;
                                }
                                break;
                            case banReason(Reasons.HARD):
                                const permBan = [text.banPerm, Utility.colorDiscord, null]
                                const monthBan = [text.standart, Utility.colorDiscord, new Date(Date.now() + 1000 * 60 * 60 * 24 * 30)]
                                const records = await History.count({ where: { target: getUser.user.id, reason: getReason, type: 'Ban' }, })
                                switch (true) {
                                    case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator):
                                    case [OwnerId.hoki].includes(interaction.user.id):
                                        description = records ? permBan[0] : monthBan[0]
                                        color = records ? permBan[1] : monthBan[1]
                                        expiresAt = records ? permBan[2] : monthBan[2]
                                        time = records ? text.time[0] : text.time[1]
                                        await createDB(interaction.user.id, getUser.user.id, getReason, 'Ban', expiresAt)
                                        await getUser.member.roles.add(WorkRoles.Ban)
                                        await getUser.member.roles.remove(getUser.member.roles.cache.filter(r => !Object.values(UntilsRoles).includes(r.id)))
                                        break;
                                    case await countStaff(interaction.user.id) != 0:
                                        description = records ? permBan[0] : monthBan[0]
                                        color = records ? permBan[1] : monthBan[1]
                                        expiresAt = records ? permBan[2] : monthBan[2]
                                        time = records ? text.time[0] : text.time[1]
                                        action(staffSheet, interaction.user.id, 10)
                                        await createDB(interaction.user.id, getUser.user.id, getReason, 'Ban', expiresAt)
                                        await getUser.member.roles.add(WorkRoles.Ban)
                                        await getUser.member.roles.remove(getUser.member.roles.cache.filter(r => !Object.values(UntilsRoles).includes(r.id)))
                                        break;
                                    default:
                                        fields = field.Bad
                                        badDescription = text.badTwo;
                                        color = Utility.colorDiscord;
                                        break;
                                }
                                break;
                            case banReason(Reasons.SOFT):
                                switch (true) {
                                    case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator):
                                    case [OwnerId.hoki].includes(interaction.user.id):
                                        description = text.standart
                                        color = Utility.colorDiscord
                                        time = text.time[1]
                                        await createDB(interaction.user.id, getUser.user.id, getReason, 'Ban', new Date(Date.now() + 1000 * 60 * 60 * 24 * 30))
                                        await getUser.member.roles.add(WorkRoles.Ban)
                                        await getUser.member.roles.remove(getUser.member.roles.cache.filter(r => !Object.values(UntilsRoles).includes(r.id)))
                                        break;
                                    case await countStaff(interaction.user.id) != 0:
                                        description = text.standart
                                        color = Utility.colorDiscord
                                        time = text.time[1]
                                        action(staffSheet, interaction.user.id, 10)
                                        await createDB(interaction.user.id, getUser.user.id, getReason, 'Ban', new Date(Date.now() + 1000 * 60 * 60 * 24 * 30))
                                        await getUser.member.roles.add(WorkRoles.Ban)
                                        await getUser.member.roles.remove(getUser.member.roles.cache.filter(r => !Object.values(UntilsRoles).includes(r.id)))
                                        break;
                                    default:
                                        fields = field.Bad
                                        badDescription = text.badTwo;
                                        color = Utility.colorDiscord;
                                        break;
                                }
                                break;
                            case banReason(Reasons.ADMIN):
                                switch (true) {
                                    case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator):
                                    case [OwnerId.hoki].includes(interaction.user.id):
                                        const permBan = [text.banPerm, Utility.colorDiscord, null]
                                        const monthBan = [text.standart, Utility.colorDiscord, new Date(Date.now() + 1000 * 60 * 60 * 24 * 30)]
                                        const records = await History.count({ where: { target: getUser.user.id, reason: getReason, type: 'Ban' }, })
                                        description = records ? permBan[0] : monthBan[0]
                                        color = records ? permBan[1] : monthBan[1]
                                        expiresAt = records ? permBan[2] : monthBan[2]
                                        time = records ? text.time[0] : text.time[1]
                                        await createDB(interaction.user.id, getUser.user.id, getReason, 'Ban', expiresAt)
                                        await getUser.member.roles.add(WorkRoles.Ban)
                                        await getUser.member.roles.remove(getUser.member.roles.cache.filter(r => !Object.values(UntilsRoles).includes(r.id)))
                                        break;
                                    default:
                                        fields = field.Bad
                                        badDescription = text.badTwo;
                                        color = Utility.colorDiscord;
                                        break;
                                }
                                break;
                        }
                        break;
                    case null:
                        switch (true) {
                            case banReason(Reasons.PERM):
                                switch (true) {
                                    case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator):
                                    case [OwnerId.hoki].includes(interaction.user.id):
                                        description = text.banPerm
                                        color = Utility.colorDiscord
                                        time = text.time[0]
                                        await createDB(interaction.user.id, getUser.user.id, getReason, 'Ban', null)
                                        await getUser.member.roles.add(WorkRoles.Ban)
                                        await getUser.member.roles.remove(getUser.member.roles.cache.filter(r => !Object.values(UntilsRoles).includes(r.id)))
                                        break;
                                    default:
                                        fields = field.Bad
                                        badDescription = text.badTwo;
                                        color = Utility.colorDiscord;
                                        break;
                                }
                                break;
                            case banReason(Reasons.HARD):
                                switch (true) {
                                    case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator):
                                    case [OwnerId.hoki].includes(interaction.user.id):
                                        const permBan = [text.banPerm, Utility.colorDiscord, null]
                                        const monthBan = [text.standart, Utility.colorDiscord, new Date(Date.now() + 1000 * 60 * 60 * 24 * 30)]
                                        const records = await History.count({ where: { target: getUser.user.id, reason: getReason, type: 'Ban' }, })
                                        description = records ? permBan[0] : monthBan[0]
                                        color = records ? permBan[1] : monthBan[1]
                                        expiresAt = records ? permBan[2] : monthBan[2]
                                        time = records ? text.time[0] : text.time[1]
                                        await createDB(interaction.user.id, getUser.user.id, getReason, 'Ban', expiresAt)
                                        await getUser.member.roles.add(WorkRoles.Ban)
                                        await getUser.member.roles.remove(getUser.member.roles.cache.filter(r => !Object.values(UntilsRoles).includes(r.id)))
                                        break;
                                    default:
                                        fields = field.Bad
                                        badDescription = text.badTwo;
                                        color = Utility.colorDiscord;
                                        break;
                                }
                                break;
                            case banReason(Reasons.SOFT):
                                switch (true) {
                                    case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator):
                                    case [OwnerId.hoki].includes(interaction.user.id):
                                        description = text.standart
                                        color = Utility.colorDiscord
                                        time = text.time[1]
                                        await createDB(interaction.user.id, getUser.user.id, getReason, 'Ban', new Date(Date.now() + 1000 * 60 * 60 * 24 * 30))
                                        await getUser.member.roles.add(WorkRoles.Ban)
                                        await getUser.member.roles.remove(getUser.member.roles.cache.filter(r => !Object.values(UntilsRoles).includes(r.id)))
                                        break;
                                    default:
                                        fields = field.Bad
                                        badDescription = text.badTwo;
                                        color = Utility.colorDiscord;
                                        break;
                                }
                                break;
                            case banReason(Reasons.ADMIN):
                                switch (true) {
                                    case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator):
                                    case [OwnerId.hoki].includes(interaction.user.id):
                                        const permBan = [text.banPerm, Utility.colorDiscord, null]
                                        const monthBan = [text.standart, Utility.colorDiscord, new Date(Date.now() + 1000 * 60 * 60 * 24 * 30)]
                                        const records = await History.count({ where: { target: getUser.user.id, reason: getReason, type: 'Ban' }, })
                                        description = records ? permBan[0] : monthBan[0]
                                        color = records ? permBan[1] : monthBan[1]
                                        expiresAt = records ? permBan[2] : monthBan[2]
                                        time = records ? text.time[0] : text.time[1]
                                        await createDB(interaction.user.id, getUser.user.id, getReason, 'Ban', expiresAt)
                                        await getUser.member.roles.add(WorkRoles.Ban)
                                        await getUser.member.roles.remove(getUser.member.roles.cache.filter(r => !Object.values(UntilsRoles).includes(r.id)))
                                        break;
                                    default:
                                        fields = field.Bad
                                        badDescription = text.badTwo;
                                        color = Utility.colorDiscord;
                                        break;
                                }
                                break;
                        }
                        break;
                }
        }
        const embedAppel = new EmbedBuilder().setDescription(text.Appel).setColor(Utility.colorDiscord).setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª(–∞) ${interaction.user.tag} | ` + '–°–µ—Ä–≤–µ—Ä ' + interaction.guild.name, iconURL: interaction.user.displayAvatarURL() });
        const AppelButton = new ButtonBuilder().setLabel('„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§–û–±–∂–∞–ª–æ–≤–∞—Ç—å„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§').setStyle(ButtonStyle.Link).setURL(`${StaffChats.Appel}`);
        const embed = new EmbedBuilder().setColor(color).setDescription(description || badDescription)
        if (badDescription) {
            await interaction.editReply({ embeds: [embed] }) && client.channels.cache.get(StaffChats.Logs).send({ embeds: [embed.setTitle(`**–ö–æ–º–∞–Ω–¥–∞: ${CommandsLogsID.Ban}**`).setFields(fields)] })
        }
        if (description) {
            await interaction.editReply({ embeds: [embed] }) && client.channels.cache.get(StaffChats.Logs).send({ embeds: [embed.setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª(–∞) ${interaction.user.tag}  | ${interaction.user.id}`, iconURL: interaction.user.displayAvatarURL() })] }) && await getUser.user.send({ embeds: [embedAppel.setTitle(`[${HistoryEmojis.Ban}] –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω ${time}`)], components: [new ActionRowBuilder().addComponents(AppelButton)] });
        }
    }
}
//===========================================/ Import the modeles \===========================================\\
const { Client, ChatInputCommandInteraction, SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');

//==========< OTHERS >==========\\
const color = require('colors');
const { WorkRoles, Utility, StaffRoles, StaffChats, HistoryEmojis, OwnerId, CommandsLogsID } = require('../../../config.js');
const History = require('../../Structures/Models/History.js');
const { fetchStaff } = require('../../Structures/Untils/Functions/fetchStaff.js');
const { action, MuteWarnBan } = require('../../Structures/Untils/Functions/action.js');
const { createDB, countDB } = require('../../Structures/Untils/Functions/actionDB.js');
const { Op } = require('sequelize');
//===========================================< Code >===========================================\\
module.exports = {
    data: new SlashCommandBuilder()
        .setName("mute")
        .setDescription("–ó–∞–±–∏—Ä–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫ –æ–±—â–µ–Ω–∏—é")
        .setDMPermission(false)
        .addUserOption((target) => target.setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å').setDescription("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è").setRequired(true))
        .addIntegerOption((time) => time.setName('–≤—Ä–µ–º—è').setDescription('–£–∫–∞–∂–∏ –≤—Ä–µ–º—è').setRequired(true).addChoices(
            { name: '30 –º–∏–Ω—É—Ç', value: 30 },
            { name: '45 –º–∏–Ω—É—Ç', value: 45 },
            { name: '60 –º–∏–Ω—É—Ç', value: 60 },
            { name: '75 –º–∏–Ω—É—Ç', value: 75 },
            { name: '90 –º–∏–Ω—É—Ç', value: 90 },
        ))
        .addStringOption((reason) => reason.setName('–ø—Ä–∏—á–∏–Ω–∞').setDescription('–ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è').setRequired(true)),

    /**
     * @param {Client} client
     * @param {ChatInputCommandInteraction} interaction
     */

    async execute(client, interaction) {



        const isAssistant = interaction.channel.id === StaffChats.Assistant
        const isControl = interaction.channel.id === StaffChats.Control

        const getUser = interaction.options.get('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        const getTime = interaction.options.get('–≤—Ä–µ–º—è');
        const getReason = interaction.options.getString('–ø—Ä–∏—á–∏–Ω–∞');
        const hasRoleExecutor = (id) => interaction.member.roles.cache.has(id);
        const hasRole = (id) => getUser.member.roles.cache.has(id);

        const memberPosition = interaction.member.roles.cache.filter(r => Object.values(StaffRoles).includes(r.id))?.sort((a, b) => b.position - a.position)?.first()?.position || 1;
        const targetPosition = getUser.member.roles.cache.filter(r => Object.values(StaffRoles).includes(r.id))?.sort((a, b) => b.position - a.position)?.first()?.position || 0;



        let description;
        let badDescription;
        let ComplexDescription;
        let fields;
        let color;
        let time;
        let staffSheet;
        let customId;


        await interaction.deferReply()
        switch (true) {
            case isControl:
                staffSheet = 1162940648
                customId = 'ControlAppelButton'
                break;
            case isAssistant:
                staffSheet = 0
                customId = 'AssistAppelButton'
                break;
            case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator) || [OwnerId.hoki].includes(interaction.user.id):
                staffSheet = null
                customId = 'AdminAppelButton'
                break;
            default:
                staffSheet = undefined
                break;
        }

        const countActiveMute = await History.count({ where: { target: getUser.user.id, type: 'Mute', createdAt: { [Op.gt]: new Date(new Date().getTime() - 864000000), } } })
        const countActiveWarn = History.count({ where: { target: getUser.user.id, type: 'Warn', expiresAt: { [Op.lt]: new Date() } } })

        const Mute = await History.create({ executor: interaction.user.id, target: getUser.user.id, reason: getReason, type: 'Mute', expiresAt: new Date(Date.now() + time), })
        const Warn = await History.create({ executor: interaction.user.id, target: getUser.user.id, reason: getReason, type: 'Warn', expiresAt: new Date(Date.now() + 1209600000), })
        const Ban = await History.create({ executor: interaction.user.id, target: getUser.user.id, reason: getReason, type: 'Ban', expiresAt: new Date(Date.now() + 1000 * 60 * 60 * 24 * 30), })

        console.log(staffSheet);
        console.log(await fetchStaff(staffSheet, interaction.user.id));
        console.log(hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator));
        console.log([OwnerId.hoki].includes(interaction.user.id));

        switch (true) {
            case getTime.value === 30:
                time = getTime.value * 60000
                break;
            case getTime.value === 45:
                time = getTime.value * 60000
                break;
            case getTime.value === 60:
                time = getTime.value * 60000
                break;
            case getTime.value === 75:
                time = getTime.value * 60000
                break;
            case getTime.value === 90:
                time = getTime.value * 60000
                break;
        }
        switch (true) {
            case staffSheet === undefined:
            case interaction.user.id === getUser.member.id:
            case getUser.user.bot:
            case memberPosition <= targetPosition:
                badDescription = `\`\`\`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!\`\`\``;
                fields = { name: `   –°—É–±—ä–µ–∫—Ç   `, value: interaction.user.id, inline: true }, { name: `   –û–±—ä–µ–∫—Ç   `, value: getUser.user.id, inline: true }
                color = Utility.colorDiscord;
                break;
            case hasRole(WorkRoles.Mute):
                badDescription = `**[${HistoryEmojis.Mute}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${getUser.user.id}> –Ω–µ –±—ã–ª –≤—ã–¥–∞–Ω <@&${WorkRoles.Mute}>\n\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36m—É–∂–µ –∏–º–µ–µ—Ç—Å—è –º—É—Ç[0m\`\`\`**`
                color = Utility.colorDiscord;
                break;
            default:

                // description = `**[${HistoryEmojis.Mute}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${getUser.user.id}> –±—ã–ª –≤—ã–¥–∞–Ω <@&${WorkRoles.Mute}> –Ω–∞ ${getTime.name}\n\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36${getReason}[0m\`\`\`**`
                // color = Utility.colorYellow
                switch (true) {
                    case await countDB(getUser.user.id, 'Mute', { [Op.gt]: new Date(new Date().getTime() - 864000000), }) >= 2:
                        switch (staffSheet) {
                            case 0:
                                switch (true) {
                                    case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator):
                                    case [OwnerId.hoki].includes(interaction.user.id):
                                        if (await countDB(getUser.user.id, 'Warn', undefined, { [Op.lt]: new Date() }) >= 2) {
                                            Mute, Warn, Ban
                                            ComplexDescription = `**[${HistoryEmojis.Mute} | ${HistoryEmojis.Warn}  | ${HistoryEmojis.Ban} ]** **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${getUser.user.id} –±—ã–ª –≤—ã–¥–∞–Ω:**`
                                            fields = { name: "```      –ú—É—Ç      ```", value: `–ü—Ä–∏—á–∏–Ω–∞: ${getReason}\n–í—Ä–µ–º—è: ${time}`, inline: true }, { name: `      –í–∞—Ä–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 14 –¥–Ω–µ–π`, inline: true }, { name: `      –ë–∞–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 30 –¥–Ω–µ–π`, inline: true }
                                        } else {
                                            Mute, Warn
                                            ComplexDescription = `**[${HistoryEmojis.Mute} | ${HistoryEmojis.Warn}]** **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${getUser.user.id} –±—ã–ª –≤—ã–¥–∞–Ω:**`
                                            fields = { name: "```      –ú—É—Ç      ```", value: `–ü—Ä–∏—á–∏–Ω–∞: ${getReason}\n–í—Ä–µ–º—è: ${time}`, inline: true }, { name: `      –í–∞—Ä–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 14 –¥–Ω–µ–π`, inline: true }
                                        }
                                        break;
                                    case await fetchStaff(staffSheet, interaction.user.id) === true:
                                        if (countActiveWarn >= 2) {
                                            await MuteWarnBan(staffSheet, interaction.user.id, true)
                                            Mute, Warn, Ban
                                            ComplexDescription = `**[${HistoryEmojis.Mute} | ${HistoryEmojis.Warn}  | ${HistoryEmojis.Ban} ]** **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${getUser.user.id} –±—ã–ª –≤—ã–¥–∞–Ω:**`
                                            fields = { name: "```      –ú—É—Ç      ```", value: `–ü—Ä–∏—á–∏–Ω–∞: ${getReason}\n–í—Ä–µ–º—è: ${time}`, inline: true }, { name: `      –í–∞—Ä–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 14 –¥–Ω–µ–π`, inline: true }, { name: `      –ë–∞–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 30 –¥–Ω–µ–π`, inline: true }
                                        } else {
                                            await MuteWarnBan(staffSheet, interaction.user.id, false)
                                            Mute, Warn
                                            ComplexDescription = `**[${HistoryEmojis.Mute} | ${HistoryEmojis.Warn}]** **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${getUser.user.id} –±—ã–ª –≤—ã–¥–∞–Ω:**`
                                            fields = { name: "```      –ú—É—Ç      ```", value: `–ü—Ä–∏—á–∏–Ω–∞: ${getReason}\n–í—Ä–µ–º—è: ${time}`, inline: true }, { name: `      –í–∞—Ä–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 14 –¥–Ω–µ–π`, inline: true }
                                        }
                                        break;
                                    default:
                                        fields = { name: `   –°—É–±—ä–µ–∫—Ç   `, value: interaction.user.id, inline: true }, { name: `   –û–±—ä–µ–∫—Ç   `, value: getUser.user.id, inline: true }
                                        badDescription = `\`\`\`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!\`\`\``;
                                        color = Utility.colorDiscord;
                                        break;
                                }
                                break;
                            case 1162940648:
                                switch (true) {
                                    case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator):
                                    case [OwnerId.hoki].includes(interaction.user.id):
                                        console.log('1');
                                        if (countActiveWarn >= 2) {
                                            Mute, Warn, Ban
                                            ComplexDescription = `**[${HistoryEmojis.Mute} | ${HistoryEmojis.Warn}  | ${HistoryEmojis.Ban} ]** **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${getUser.user.id} –±—ã–ª –≤—ã–¥–∞–Ω:**`
                                            fields = { name: "```      –ú—É—Ç      ```", value: `–ü—Ä–∏—á–∏–Ω–∞: ${getReason}\n–í—Ä–µ–º—è: ${time}`, inline: true }, { name: `      –í–∞—Ä–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 14 –¥–Ω–µ–π`, inline: true }, { name: `      –ë–∞–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 30 –¥–Ω–µ–π`, inline: true }
                                        } else {
                                            Mute, Warn
                                            ComplexDescription = `**[${HistoryEmojis.Mute} | ${HistoryEmojis.Warn}]** **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${getUser.user.id} –±—ã–ª –≤—ã–¥–∞–Ω:**`
                                            fields = { name: "```      –ú—É—Ç      ```", value: `–ü—Ä–∏—á–∏–Ω–∞: ${getReason}\n–í—Ä–µ–º—è: ${time}`, inline: true }, { name: `      –í–∞—Ä–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 14 –¥–Ω–µ–π`, inline: true }
                                        }
                                        break;
                                    case await fetchStaff(staffSheet, interaction.user.id) === true:
                                        console.log('2');
                                        if (countActiveWarn >= 2) {
                                            await MuteWarnBan(staffSheet, interaction.user.id, true)
                                            Mute, Warn, Ban
                                            ComplexDescription = `**[${HistoryEmojis.Mute} | ${HistoryEmojis.Warn}  | ${HistoryEmojis.Ban} ]** **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${getUser.user.id} –±—ã–ª –≤—ã–¥–∞–Ω:**`
                                            fields = { name: "```      –ú—É—Ç      ```", value: `–ü—Ä–∏—á–∏–Ω–∞: ${getReason}\n–í—Ä–µ–º—è: ${time}`, inline: true }, { name: `      –í–∞—Ä–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 14 –¥–Ω–µ–π`, inline: true }, { name: `      –ë–∞–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 30 –¥–Ω–µ–π`, inline: true }
                                        } else {
                                            await MuteWarnBan(staffSheet, interaction.user.id, false)
                                            Mute, Warn
                                            ComplexDescription = `**[${HistoryEmojis.Mute} | ${HistoryEmojis.Warn}]** **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${getUser.user.id} –±—ã–ª –≤—ã–¥–∞–Ω:**`
                                            fields = { name: "```      –ú—É—Ç      ```", value: `–ü—Ä–∏—á–∏–Ω–∞: ${getReason}\n–í—Ä–µ–º—è: ${time}`, inline: true }, { name: `      –í–∞—Ä–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 14 –¥–Ω–µ–π`, inline: true }
                                        }
                                        break;
                                    default:
                                        fields = { name: `   –°—É–±—ä–µ–∫—Ç   `, value: interaction.user.id, inline: true }, { name: `   –û–±—ä–µ–∫—Ç   `, value: getUser.user.id, inline: true }
                                        badDescription = `\`\`\`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!\`\`\``;
                                        color = Utility.colorDiscord;
                                        break;
                                }
                                break;
                            case null:
                                switch (true) {
                                    case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator):
                                    case [OwnerId.hoki].includes(interaction.user.id):
                                        if (countActiveWarn >= 2) {
                                            Mute, Warn, Ban
                                            ComplexDescription = `**[${HistoryEmojis.Mute} | ${HistoryEmojis.Warn}  | ${HistoryEmojis.Ban} ]** **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${getUser.user.id} –±—ã–ª –≤—ã–¥–∞–Ω:**`
                                            fields = { name: "```      –ú—É—Ç      ```", value: `–ü—Ä–∏—á–∏–Ω–∞: ${getReason}\n–í—Ä–µ–º—è: ${time}`, inline: true }, { name: `      –í–∞—Ä–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 14 –¥–Ω–µ–π`, inline: true }, { name: `      –ë–∞–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 30 –¥–Ω–µ–π`, inline: true }
                                        } else {
                                            Mute, Warn
                                            ComplexDescription = `**[${HistoryEmojis.Mute} | ${HistoryEmojis.Warn}]** **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${getUser.user.id} –±—ã–ª –≤—ã–¥–∞–Ω:**`
                                            fields = { name: "```      –ú—É—Ç      ```", value: `–ü—Ä–∏—á–∏–Ω–∞: ${getReason}\n–í—Ä–µ–º—è: ${time}`, inline: true }, { name: `      –í–∞—Ä–Ω      `, value: `–ü—Ä–∏—á–∏–Ω–∞: 4.3\n–í—Ä–µ–º—è: 14 –¥–Ω–µ–π`, inline: true }
                                        }
                                        break;
                                    default:
                                        fields = { name: `   –°—É–±—ä–µ–∫—Ç   `, value: interaction.user.id, inline: true }, { name: `   –û–±—ä–µ–∫—Ç   `, value: getUser.user.id, inline: true }
                                        badDescription = `\`\`\`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!\`\`\``;
                                        color = Utility.colorDiscord;
                                        break;
                                }
                                break;
                        }
                        break;
                    default:
                        switch (staffSheet) {
                            case 0:
                                switch (true) {
                                    case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator):
                                        description = `**[${HistoryEmojis.Mute}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${getUser.user.id}> –±—ã–ª –≤—ã–¥–∞–Ω <@&${WorkRoles.Mute}> –Ω–∞ ${getTime.name}\n\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36${getReason}[0m\`\`\`**`
                                        color = Utility.colorDiscord
                                        Mute
                                        getUser.member.roles.add(WorkRoles.Mute)

                                        break;
                                    case await fetchStaff(staffSheet, interaction.user.id) === true:
                                        await action(staffSheet, interaction.user.id, 7)
                                        description = `**[${HistoryEmojis.Mute}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${getUser.user.id}> –±—ã–ª –≤—ã–¥–∞–Ω <@&${WorkRoles.Mute}> –Ω–∞ ${getTime.name}\n\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36${getReason}[0m\`\`\`**`
                                        color = Utility.colorDiscord
                                        Mute
                                        getUser.member.roles.add(WorkRoles.Mute)
                                        break;
                                    default:
                                        fields = { name: `   –°—É–±—ä–µ–∫—Ç   `, value: interaction.user.id, inline: true }, { name: `   –û–±—ä–µ–∫—Ç   `, value: getUser.user.id, inline: true }
                                        badDescription = `\`\`\`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!\`\`\``;
                                        color = Utility.colorDiscord;
                                        break;
                                }
                                break;
                            case 1162940648:
                                switch (true) {
                                    case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator):
                                        description = `**[${HistoryEmojis.Mute}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${getUser.user.id}> –±—ã–ª –≤—ã–¥–∞–Ω <@&${WorkRoles.Mute}> –Ω–∞ ${getTime.name}\n\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36${getReason}[0m\`\`\`**`
                                        color = Utility.colorDiscord
                                        Mute
                                        getUser.member.roles.add(WorkRoles.Mute)
                                        break;
                                    case await fetchStaff(staffSheet, interaction.user.id) === true:
                                        await action(staffSheet, interaction.user.id, 7)
                                        description = `**[${HistoryEmojis.Mute}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${getUser.user.id}> –±—ã–ª –≤—ã–¥–∞–Ω <@&${WorkRoles.Mute}> –Ω–∞ ${getTime.name}\n\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36${getReason}[0m\`\`\`**`
                                        color = Utility.colorDiscord
                                        Mute
                                        getUser.member.roles.add(WorkRoles.Mute)
                                        break;
                                    default:
                                        fields = { name: `   –°—É–±—ä–µ–∫—Ç   `, value: interaction.user.id, inline: true }, { name: `   –û–±—ä–µ–∫—Ç   `, value: getUser.user.id, inline: true }
                                        badDescription = `\`\`\`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!\`\`\``;
                                        color = Utility.colorDiscord;
                                        break;
                                }
                                break;
                            case null:
                                switch (true) {
                                    case hasRoleExecutor(StaffRoles.Admin || StaffRoles.Developer || StaffRoles.Moderator):
                                        description = `**[${HistoryEmojis.Mute}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${getUser.user.id}> –±—ã–ª –≤—ã–¥–∞–Ω <@&${WorkRoles.Mute}> –Ω–∞ ${getTime.name}\n\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36${getReason}[0m\`\`\`**`
                                        color = Utility.colorDiscord
                                        Mute
                                        getUser.member.roles.add(WorkRoles.Mute)
                                        await interaction.user.send({ embeds: [], components: [] })
                                        break;
                                    default:
                                        badDescription = `\`\`\`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!\`\`\``;
                                        fields = { name: `   –°—É–±—ä–µ–∫—Ç   `, value: interaction.user.id, inline: true }, { name: `   –û–±—ä–µ–∫—Ç   `, value: getUser.user.id, inline: true }
                                        color = Utility.colorDiscord;
                                        break;
                                }
                                break;
                        }
                        break;
                }
                break;
        }
        const embedAppel = new EmbedBuilder().setTitle(`[${HistoryEmojis.Pred}] –í—ã –ø–æ–ª—É—á–∏–ª–∏ –º—É—Ç –Ω–∞ ${time} –º–∏–Ω—É—Ç`).setDescription(`\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36m${getReason}[0m\`\`\` \n${Utility.pointEmoji} –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å–ø–æ—Ä–∏—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ **–Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.**\n${Utility.pointEmoji} –ò–º–µ–π—Ç–µ –≤–≤–∏–¥—É, —á—Ç–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤–∞–º –ª—É—á—à–µ \n${Utility.fonEmoji} –∏–º–µ—Ç—å **–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞** —Å–≤–æ–π –Ω–µ–≤–∏–Ω–æ–≤–Ω–æ—Å—Ç–∏.\n${Utility.pointEmoji} –ï—Å–ª–∏ –≤–∞—à–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ,\n ${Utility.fonEmoji} **–æ–Ω–æ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ.**`).setColor(Utility.colorDiscord).setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª(–∞) ${interaction.user.tag} | ` + '–°–µ—Ä–≤–µ—Ä ' + interaction.guild.name, iconURL: interaction.user.displayAvatarURL() });
        const AppelButton = new ButtonBuilder().setCustomId(customId).setLabel('„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§–û–±–∂–∞–ª–æ–≤–∞—Ç—å„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§').setStyle(ButtonStyle.Primary);
        console.log(color);
        console.log(description);
        console.log(badDescription);
        console.log(ComplexDescription);
        console.log(fields);
        const embed = new EmbedBuilder().setColor(color).setDescription(description || ComplexDescription || badDescription)
        switch (true) {
            case badDescription:
                await interaction.editReply({ embeds: [embed] }) && client.channels.cache.get(StaffChats.Logs).send({ embeds: [embed.setTitle(`**–ö–æ–º–∞–Ω–¥–∞: ${CommandsLogsID.Mute}**`).setFields(fields)] })
                break;
            case description:
                await interaction.editReply({ embeds: [embed] }) && client.channels.cache.get(StaffChats.Logs).send({ embeds: [embed] }) && await getUser.user.send({ embeds: [embedAppel], components: [new ActionRowBuilder().addComponents(AppelButton)] });
                break;
            case ComplexDescription:
                await interaction.editReply({ embeds: [embed] })
                break;
        }
    }
}
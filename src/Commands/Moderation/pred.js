//===========================================/ Import the modeles \===========================================\\
const { Client, ChatInputCommandInteraction, SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');

//==========< OTHERS >==========\\
const { WorkRoles, Utility, StaffRoles, StaffChats, HistoryEmojis } = require('../../../config.js');
const History = require('../../Structures/Models/History.js');

const { Op } = require('sequelize');
const { doc, docAssist } = require('../../Structures/Untils/googlesheet.js');
//===========================================< Code >===========================================\\
module.exports = {
    data: new SlashCommandBuilder()
        .setName("pred")
        .setDescription("–í—ã–¥–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
        .setDMPermission(false)
        .addUserOption((target) => target.setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å').setDescription("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è").setRequired(true))
        .addStringOption((reason) => reason.setName('–ø—Ä–∏—á–∏–Ω–∞').setDescription('–Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è').setRequired(true)),

    /**
     * @param {Client} client
     * @param {ChatInputCommandInteraction} interaction
     */

    async execute(client, interaction) {
        if (![StaffChats.Assistant, StaffChats.Control].includes(interaction.channel.id)) {
            await interaction.reply({
                ephemeral: true,
                content: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–µ–π —Å—Ç–∞—Ñ—Ñ —Ä–æ–ª–∏!'
            })
            return
        }
        const isAssistant = interaction.channel.id === StaffChats.Assistant
        const isControl = interaction.channel.id === StaffChats.Control

        const getUser = interaction.options.get('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        const getReason = interaction.options.getString('–ø—Ä–∏—á–∏–Ω–∞');
        const hasRole = (id) => getUser.member.roles.cache.has(id);

        const memberPosition = interaction.member.roles.cache.filter(r => Object.values(StaffRoles).includes(r.id))?.sort((a, b) => b.position - a.position)?.first()?.position || 1;
        const targetPosition = getUser.member.roles.cache.filter(r => Object.values(StaffRoles).includes(r.id))?.sort((a, b) => b.position - a.position)?.first()?.position || 0;

        let description
        let color
        let staffSheet;
        let customId;

        await interaction.deferReply()

        switch (true) {
            case isControl:
                await doc.loadInfo()
                staffSheet = doc.sheetsById[1162940648]
                customId = 'ControlAppelButton'
                break;
            case isAssistant:
                await docAssist.loadInfo()
                staffSheet = docAssist.sheetsById[0]
                customId = 'AssistAppelButton'
                break;
        }

        switch (true) {
            case interaction.user.id === getUser.member.id:
            case getUser.user.bot:
            case memberPosition <= targetPosition:
                description = '**–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!**';
                color = Utility.colorRed;
                break;
            case hasRole(WorkRoles.Pred):
                const activePred = await History.findOne({
                    where: {
                        target: getUser.user.id,
                        type: 'Pred',
                        expiresAt: { [Op.gt]: new Date() },
                    }
                })
                if (activePred) {
                    description = `**[${HistoryEmojis.Pred}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${getUser.user.id}> –Ω–µ –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ <@&${WorkRoles.Pred}>\n\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36m—É–∂–µ –∏–º–µ–µ—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ[0m\`\`\`**`
                    color = Utility.colorRed
                } else {
                    description = `**[${HistoryEmojis.Pred}] –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç! –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–Ω—è—Ç–æ.**`
                    color = Utility.colorRed
                    getUser.member.roles.remove(WorkRoles.Pred)
                }
                break;
            default:
                async function fetchStaff(user, getUser, staffSheet) {
                    if (![StaffRoles.Admin, StaffRoles.Developer, StaffRoles.Moderator, user != '297372127768870913'].includes(user)) {
                        const sheet = staffSheet;
                        await sheet.loadCells()
                        const rows = await sheet.getRows();
                        const row = rows.find((r) => r._rawData.includes(user))
                        const day = (new Date().getDay() + 1) % 7
                        const cell = sheet.getCell(row.rowNumber - 1, 8 + day * 7)

                        cell.value = Number(cell.value || 0) + 1
                        sheet.saveUpdatedCells();

                        description = `**[${HistoryEmojis.Pred}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${getUser.user.id}> –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ <@&${WorkRoles.Pred}>\n\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36m${getReason}[0m\`\`\`**`
                        color = Utility.colorYellow
                    }
                }
                try {
                    await fetchStaff(interaction.user.id, interaction.options.get('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'), staffSheet)
                    description = `**[${HistoryEmojis.Pred}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${getUser.user.id}> –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ <@&${WorkRoles.Pred}>\n\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36m${getReason}[0m\`\`\`**`
                    color = Utility.colorYellow
                } catch (error) {
                    description = `**–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å** \`–ö–æ–Ω—Ç—Ä–æ–ª–æ–º / –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º\``
                    color = Utility.colorDiscord
                    break;
                }
                const embedAppel = new EmbedBuilder().setTitle(`[${HistoryEmojis.Pred}] –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ 24 —á–∞—Å–∞`).setDescription(`\`\`\`ansi\n[2;35m[2;30m[2;35m–ü—Ä–∏—á–∏–Ω–∞:[0m[2;30m[0m[2;35m[0m [2;36m${getReason}[0m\`\`\` \n${Utility.pointEmoji} –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å–ø–æ—Ä–∏—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ **–Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.**\n${Utility.pointEmoji} –ò–º–µ–π—Ç–µ –≤–≤–∏–¥—É, —á—Ç–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤–∞–º –ª—É—á—à–µ \n${Utility.fonEmoji} –∏–º–µ—Ç—å **–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞** —Å–≤–æ–π –Ω–µ–≤–∏–Ω–æ–≤–Ω–æ—Å—Ç–∏.\n${Utility.pointEmoji} –ï—Å–ª–∏ –≤–∞—à–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ,\n ${Utility.fonEmoji} **–æ–Ω–æ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ.**`).setColor(Utility.colorDiscord).setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª(–∞) ${interaction.user.tag} | ` + '–°–µ—Ä–≤–µ—Ä ' + interaction.guild.name, iconURL: interaction.user.displayAvatarURL() });
                const AppelButton = new ButtonBuilder().setCustomId(customId).setLabel('„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§–û–±–∂–∞–ª–æ–≤–∞—Ç—å„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§').setStyle(ButtonStyle.Primary);

                await History.create({
                    executor: interaction.user.id,
                    target: getUser.user.id,
                    reason: getReason,
                    type: 'Pred',
                    expiresAt: new Date(Date.now() + 86400000), // 24 —á–∞—Å–∞
                })
                getUser.member.roles.add(WorkRoles.Pred)
                await getUser.user.send({ embeds: [embedAppel], components: [new ActionRowBuilder().addComponents(AppelButton)] });
                break;
        }
        const embed = new EmbedBuilder().setColor(color).setDescription(description)
        await interaction.editReply({ embeds: [embed] })
    }
}